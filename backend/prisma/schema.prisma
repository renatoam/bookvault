generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  books        Book[]
  refreshTokens RefreshToken[]
  passwordResetTokens PasswordResetToken[]
}

model Book {
  id          String   @id @default(cuid())
  title       String
  author      String   // Mantém como string para simplicidade
  status      BookStatus
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([author]) // Index para busca rápida por autor
  @@index([userId, status]) // Index composto para filtros do usuário
}

// Tabela separada para autocomplete e normalização futura
model Author {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique // Para URLs amigáveis
  bio         String?
  imageUrl    String?
  website     String?
  booksCount  Int      @default(0) // Cache do número de livros
  isVerified  Boolean  @default(false) // Para autores verificados
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name]) // Index para autocomplete
  @@index([booksCount]) // Index para ordenação por popularidade
}

enum BookStatus {
  WISHLIST
  READING
  FINISHED
}

model RefreshToken {
  id          Int      @id @default(autoincrement())
  token       String   @unique
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  revokedAt   DateTime?
  userAgent   String?
  ipAddress   String?
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
}
